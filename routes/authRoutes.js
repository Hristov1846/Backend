import express from "express";
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";
import User from "../models/User.js"; // —É–≤–µ—Ä–∏ —Å–µ, —á–µ –∏–º–∞—à User –º–æ–¥–µ–ª
import dotenv from "dotenv";

dotenv.config();
const router = express.Router();

// üîπ Register
router.post("/register", async (req, res) => {
  try {
    const { username, email, password } = req.body;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—â email
    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res.status(400).json({ message: "–ò–º–µ–π–ª—ä—Ç –≤–µ—á–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞!" });
    }

    // Hash –Ω–∞ –ø–∞—Ä–æ–ª–∞—Ç–∞
    const hashedPassword = await bcrypt.hash(password, 10);

    const newUser = new User({
      username,
      email,
      password: hashedPassword,
    });

    await newUser.save();

    res.status(201).json({ message: "‚úÖ –£—Å–ø–µ—à–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è!" });
  } catch (err) {
    console.error("Register error:", err);
    res.status(500).json({ message: "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ‚ùå" });
  }
});

// üîπ Login
router.post("/login", async (req, res) => {
  try {
    const { email, password } = req.body;

    // –¢—ä—Ä—Å–∏–º user –ø–æ email
    const user = await User.findOne({ email });
    if (!user) {
      return res.status(400).json({ message: "–ù–µ–≤–∞–ª–∏–¥–µ–Ω –∏–º–µ–π–ª ‚ùå" });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –ø–∞—Ä–æ–ª–∞—Ç–∞
    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res.status(400).json({ message: "–ì—Ä–µ—à–Ω–∞ –ø–∞—Ä–æ–ª–∞ ‚ùå" });
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä–∞–º–µ JWT token
    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, {
      expiresIn: "1d",
    });

    res.json({
      token,
      username: user.username,
      email: user.email,
    });
  } catch (err) {
    console.error("Login error:", err);
    res.status(500).json({ message: "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥ ‚ùå" });
  }
});

export default router;
